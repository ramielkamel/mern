{"ast":null,"code":"import { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL } from './../Constants/OrderConstants';\nimport axios from 'axios';\nimport { CART_CLEAR_ITEMS } from '../Constants/CartConstants';\nimport { ORDER_CREATE_FAIL } from './../Constants/OrderConstants';\nimport { logout } from './userActions'; // CREATE ORDER\n\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: CART_CLEAR_ITEMS,\n      payload: data\n    });\n    localStorage.setItem(\"orderDetails\", JSON.stringify(data));\n    localStorage.removeItem(\"cartItems\");\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: message\n    });\n  }\n}; // ORDER DETAILS\n\nexport const getOrderDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    console.log(userInfo.id);\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders/${id}`, config);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/hadha men fadh rabi/Desktop/Full stack prject/frontend/src/Redux/Actions/OrderActions.js"],"names":["ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","axios","CART_CLEAR_ITEMS","ORDER_CREATE_FAIL","logout","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","payload","localStorage","setItem","JSON","stringify","removeItem","error","message","response","getOrderDetails","id","console","log","get"],"mappings":"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","sourcesContent":["\r\nimport { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL } from './../Constants/OrderConstants';\r\nimport  axios  from 'axios';\r\nimport { CART_CLEAR_ITEMS } from '../Constants/CartConstants';\r\nimport { ORDER_CREATE_FAIL } from './../Constants/OrderConstants';\r\nimport {  logout } from './userActions';\r\n\r\n\r\n\r\n// CREATE ORDER\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: ORDER_CREATE_REQUEST });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n  \r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n      const { data } = await axios.post(`/api/orders`, order, config);\r\n      dispatch({ type: ORDER_CREATE_SUCCESS, payload: data });\r\n      dispatch({ type: CART_CLEAR_ITEMS, payload: data });\r\n      localStorage.setItem(\"orderDetails\", JSON.stringify(data))\r\n  \r\n      localStorage.removeItem(\"cartItems\");\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n      if (message === \"Not authorized, token failed\") {\r\n        dispatch(logout());\r\n      }\r\n      dispatch({\r\n        type: ORDER_CREATE_FAIL,\r\n        payload: message,\r\n      });\r\n    }\r\n  };\r\n  \r\n  // ORDER DETAILS\r\n  export const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: ORDER_DETAILS_REQUEST });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n      \r\n      console.log(userInfo.id)\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n      \r\n      const { data } = await axios.get(`/api/orders/${id}`, config);\r\n      dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n          \r\n      if (message === \"Not authorized, token failed\") {\r\n        dispatch(logout());\r\n      }\r\n      dispatch({\r\n        type: ORDER_DETAILS_FAIL,\r\n        payload: message,\r\n        \r\n        \r\n      });\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}